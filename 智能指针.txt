#define _CRT_SECURE_NO_WARNINGS 1

#include<iostream>
using namespace std;

//template<class T>
//class AutoPtr
//{
//public:
//	AutoPtr(T* ptr)
//		:_ptr(ptr)
//	{}
//
//	AutoPtr( AutoPtr<T>& sp)
//	{
//		 _ptr = sp._ptr ;
//		sp._ptr = NULL;
//	}
//
//	~AutoPtr()
//	{
//		if(_ptr)
//		{
//			delete _ptr;
//		    _ptr = NULL;
//		}
//		
//	}
//
//	AutoPtr<T>& operator=(AutoPtr<T>& sp)
//	{
//		if(this != &sp)
//		{
//		 _ptr = sp._ptr ;
//		sp._ptr = NULL;
//		}
//	}
//	
//	
//	T& operator*()
//	{
//		return *_ptr;
//	}
//
//	T* operator->()
//	{
//		return _ptr;
//	}
//
//	T* GetPtr()
//	{
//		return _ptr;
//	}
//
//private:
//	T* _ptr;
//};
//
//template<class T>
//class ScoprPtr
//{
//public:
//	ScoprPtr(T* ptr)
//		:_ptr(ptr)
//	{}
//
//	~ScoprPtr()
//	{
//		if(_ptr)
//		{
//			delete _ptr;
//		    _ptr = NULL;
//		}
//		
//	}
//
//	T& operator*()
//	{
//		return *_ptr;
//	}
//
//	T* operator->()
//	{
//		return _ptr;
//	}
//
//	T* GetPtr()
//	{
//		return _ptr;
//	}
//protected:
//	ScoprPtr<T>& ScoprPtr=(ScoprPtr<T>& sp);
//	ScoprPtr(ScoprPtr<T>& sp);
//private:
//	T* _ptr;
//
//};


template<class T>
class SharePtr
{
public:
	SharePtr(T* ptr)
		:_ptr(ptr)
		,_pcount(new int(1))
	{}

	SharePtr(SharePtr<T>& sp)
	{
		_ptr = sp._ptr;
		_pcount = sp._pcount;
		++*(sp._pcount);
	}

	~SharePtr()
	{
		if(--(*_pcount) == 0)
		{
			delete _ptr;
			delete _pcount;

		    _ptr = NULL;
			_pcount = NULL;
		}
		
	}

	SharePtr<T>& operator=(SharePtr<T>& sp)
	{
		if(this != &sp)
		{
		 _ptr = sp._ptr;
		_pcount = sp._pcount;
		++*(sp._pcount);
		}
	}
	/*SharePtr<T>& operator=(SharePtr<T> sp)
	{
		SharePtr<T> tem(sp);
		swap(_ptr,tem._ptr);
		swap(_pcount,tem._pcount);

	}*/
	
	T& operator*()
	{
		return *_ptr;
	}

	T* operator->()
	{
		return _ptr;
	}

	T* GetPtr()
	{
		return _ptr;
	}

private:
	T* _ptr;
	int* _pcount;
};

int main()
{
	/*ScoprPtr<int> s1(new int(10));
	ScoprPtr<int> s2(s1);*/
	SharePtr<int> s1(new int(10));
	SharePtr<int> s2(s1);

	SharePtr<int> s3(new int(10));
	SharePtr<int> s4(s3);
	system("pause");
	return 0;
}