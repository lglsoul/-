.h
#define MAX_SIZE 5
typedef int DataType;

typedef struct SeqList
{
	DataType arry[MAX_SIZE];
	size_t size;
}SeqList;

void PrintSeqList(SeqList* pSeq);
void InintSeqList(SeqList* pSeq);
void PushBack(SeqList* pSeq, DataType x);
void PopBack(SeqList* pSeq);
void PushFront(SeqList* pSeq, DataType x);
void PopFront(SeqList* pSeq);
void Insert(SeqList* pSeq, size_t pos,  DataType x);
int Find(SeqList* pSeq, size_t pos,  DataType x);
void Erase(SeqList* pSeq, size_t pos);
void Remove(SeqList* pSeq, DataType x);
void RemoveAll(SeqList* pSeq,DataType x);
void BubbleSort(SeqList* pSeq);
void SeclectSort(SeqList* pSeq);
int BinarySeach(SeqList* pSeq, DataType x);

.cpp
void PrintSeqList(SeqList* pSeq)
{
	assert(pSeq);
	size_t i = 0;
	for (i = 0; i < pSeq->size;i++)
	{
		printf("%d\t", pSeq->arry[i]);
	}
	printf("\n");
}
void InintSeqList(SeqList* pSeq)
{
	assert(pSeq);
	pSeq->size = 0;
}
void PushBack(SeqList* pSeq, DataType x)
{
	assert(pSeq);
	if (pSeq->size < MAX_SIZE)
	{
		pSeq->arry[pSeq->size] = x;
		pSeq->size++;
	}
	else
	{
		printf("SeqList is full!\n");
	}
}
void PopBack(SeqList* pSeq)
{
	assert(pSeq);
	if (pSeq->size > 0)
	{
		pSeq->size--;
	}
	else
	{
		printf("SeqList is empty!\n");
	}
}
void PushFront(SeqList* pSeq, DataType x)
{
	assert(pSeq);
	if (pSeq->size < MAX_SIZE)
	{
		size_t i = pSeq->size;
		for (; i>0; i--)
		{
			pSeq->arry[i] = pSeq->arry[i - 1];
		}
		pSeq->arry[0] = x;
		pSeq->size++;
	}
	else
	{
		printf("SeqList is full!\n");
	}
}
void PopFront(SeqList* pSeq)
{
	assert(pSeq);
	if (pSeq->size > 0)
	{
		size_t i = 0;
		for (i = 0; i <( pSeq->size - 1); i++)
		{
			pSeq->arry[i] = pSeq->arry[i + 1];
		}
		pSeq->size--;
	}
	else
	{
		printf("SeqList is empty!\n");
	}
}
void Insert(SeqList* pSeq, size_t pos, DataType x)
{
	assert(pSeq);
	if (pSeq->size > 0 && pSeq->size < MAX_SIZE)
	{
		size_t i = pSeq->size;
		for (; i>=pos; i--)
		{
			pSeq->arry[i] = pSeq->arry[i - 1];
		}
		pSeq->arry[pos - 1] = x;
		pSeq->size++;
	}
	else
	{
		printf("error!\n");
	}
}
int Find(SeqList* pSeq, DataType x)
{
	assert(pSeq);
	if (pSeq->size > 0)
	{
		size_t i = 0;
		while (pSeq->arry[i] != x && i < pSeq->size)
		{
			i++;
		}
		if (pSeq->arry[i] = x)
		{
			return i;
		}
		else
		{
			return 0;
		}
	}
	else
	{
		return -1;
	}
}
void Erase(SeqList* pSeq, size_t pos)
{
	assert(pSeq);
	if (pSeq->size > 0)
	{
		size_t i = pos - 1;
		while (i < pSeq->size)
		{
			pSeq->arry[i] = pSeq->arry[i + 1];
			i++;
		}
		pSeq->size--;
	}
	else
	{
		printf("SqList is empty!\n");
	}
}
void Remove(SeqList* pSeq, DataType x)
{
	assert(pSeq);
	if (pSeq->size > 0)
	{
		size_t i = 0;
		while(i < pSeq->size)
		{
			if (pSeq->arry[i] = x)
			{
				while (i < pSeq->size-1)
				{
					pSeq->arry[i] = pSeq->arry[i + 1];
				}
				pSeq->size--;
				return;
			}
			i++;
		}
	}
	else
	{
		printf("SqList is empty!\n");
	}
}
void RemoveAll(SeqList* pSeq, DataType x)
{
	assert(pSeq);
	if (pSeq->size > 0)
	{
		size_t i = 0;
		size_t count = 0;
		for (i = 0; i < pSeq->size; i++)
		{
			if (pSeq->arry[i] == x)
			{
				count++;
			}
			else
			{
				pSeq->arry[i - count] = pSeq->arry[i];
			}
		}
		pSeq->size -= count;
	}
	else
	{
		printf("SqList is empty!\n");
	}
}
void BubbleSort(SeqList* pSeq)
{
	assert(pSeq);
	if (pSeq->size > 0)
	{
		size_t left = 0;
		size_t right = pSeq->size ;
		size_t max_size = 0;
		size_t min_size = 0;
		while (left < right)
		{
			size_t i = left;
			DataType max = pSeq->arry[left];
			DataType min = pSeq->arry[left];
			for (; i < right; i++)
			{
				if (pSeq->arry[i]>max)
				{
					max = pSeq->arry[i];
					max_size = i;
				}
				else if (pSeq->arry[i] < min)
				{
					min = pSeq->arry[i];
					min_size = i;
				}
			}
			pSeq->arry[min_size] = pSeq->arry[left];
			pSeq->arry[max_size] = pSeq->arry[right];
			pSeq->arry[left] = min;
			pSeq->arry[right] = max;
			left++;
			right--;
		}
	}
	else
	{
		printf("SqList is empty!\n");
	}
}
int BinarySearch(SeqList* pSeq, DataType x)
{
	assert(pSeq);
	if (pSeq->size > 0)
	{
		size_t left = 0;
		size_t right = pSeq->size-1;
		while (left < right)
		{
			size_t mid = 0;
			mid=(left - (left - right)) / 2;
			if (pSeq->arry[mid]>x)
			{
				right = mid - 1;
			}
			else if (pSeq->arry[mid] < x)
			{
				left = mid + 1;
			}
			else
			{
				return mid;
			}
		}
	}
	else
	{
		return -1;
	}
	return 0;
}
