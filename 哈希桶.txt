
#include<iostream>
#include<vector>
#include<string>
using namespace std;

static size_t BKDRHash(const char * str)
  {
     unsigned int seed = 131; // 31 131 1313 13131 131313
     unsigned int hash = 0;
     while (*str)
    {
         hash = hash * seed + (* str++);
    }
     return (hash & 0x7FFFFFFF);
  }

template<class K>
struct	HashFuncDefault
{
	size_t operator()(const K& s1)
	{
		return s1;
	}
};
template<>
struct HashFuncDefault<string>   //特化HashFuncDefault
{
    size_t operator()(const string& key)
    {
        return  BKDRHash(key.c_str());    //要用c_str()才能把string 转化为 char*
    }
};
template<class K, class V>
struct HashTableNode
{
	K _key;
	V _value;
	HashTableNode<K,V>* _next;
	HashTableNode(const K& key,const V& value)
		:_key(key)
		,_value(value)
		,_next(NULL)
	{}
};

template<class K, class V,class HashFunc = HashFuncDefault<K>>
class HashTable
{
	typedef  HashTableNode<K,V>   Node;
public:
	HashTable()
		:_size(0)
	{}
	~HashTable()
	{
		for(size_t i = 0; i<_tables.size();++i)
		{
			Node* cur = _tables[i];
			while(cur)
			{
				Node* tem = cur;
				cur = cur->_next;
				delete tem;
			}
		}
		_size = 0;
	}
	HashTable operator=(HashTable<K,V> s1)
	{
		swap(_tables,s1._tables);
		swap(_size,s1._size);
		return *this;
	}

	bool Insert(const K& key,const V& value)
	{
		_CheckExpand();
		size_t indix = _Hash(key,_tables.size());
		Node* cur = _tables[indix];
		while (cur)
        {
            if (cur->_key != key)    //防止key冗余  而不能用防止value 冗余
            {
                cur = cur->_next;
            }
            else
            {
                return false;
            }
        }

		Node* tem = new Node(key,value);
		tem->_next = _tables[indix];
		_tables[indix] = tem;
		_size++;

		return true;
	}

	Node* Find(const K& key)
	{
		size_t indix = _Hash(key,_tables.size());
		Node* cur = _tables[indix];
		while(cur)
		{
			if(cur->_key == key)
				return cur;

			cur = cur->_next;
		}

		return NULL;
	}

	bool Remove(const K& key)
	{
		size_t indix = _Hash(key,_tables.size());
		Node* cur = Find(key);
		if(cur == NULL)
			return false;

		swap(cur->_key,_tables[indix]->_key);
		swap(cur->_value,_tables[indix]->_value);
		Node* tem = _tables[indix];
		_tables[indix] = tem->_next;
		delete tem;
		--_size;
		return true;
	}

protected:
	size_t _Hash(const K& key, size_t capatity)
	{
		return HashFunc()(key) % capatity;
	}

	size_t _GetNextPrm(size_t size)
	{
	const int _PrimeSize = 28;
     static const unsigned long _PrimeList [_PrimeSize] =
    {
        53ul,         97ul,         193ul,       389ul,       769ul,
        1543ul,       3079ul,       6151ul,      12289ul,     24593ul,
        49157ul,      98317ul,      196613ul,    393241ul,    786433ul,
        1572869ul,    3145739ul,    6291469ul,   12582917ul,  25165843ul,
        50331653ul,   100663319ul,  201326611ul, 402653189ul, 805306457ul,
        1610612741ul, 3221225473ul, 4294967291ul
    };
	 size_t i = 0;
	 for( i = 0; i < _PrimeSize ;++i)
	 {
		 if(_PrimeList[i] > size)
		 {
			 return _PrimeList[i];
		 }
	 }
		 return _PrimeList[i-1];
	}

	void _CheckExpand()
	{
		if(_size == _tables.size())
		{
			size_t indix = _GetNextPrm(_size);
			vector<Node*> tem;
			tem.resize(indix);

			for(size_t i = 0; i < _tables.size();++i)
			{
				Node* cur = _tables[i];
				while(cur)
				{
					Node* move = cur;
                    cur = cur->_next;

                    size_t index = _Hash(move->_key,tem.size());
                    move->_next = tem[index];            //用头插法更方便
                    tem[index] = move;
				}
			}
			_tables.swap(tem);
		}

		
	}
private:
  vector<Node*> _tables;
  size_t _size;
};


int main()
{
	HashTable<int,char> ht;
	for(int i = 0; i<56; i++)
	{
		ht.Insert(i,i);
	}

	for(int i = 0; i<33; i++)
	{
		ht.Remove(i);
	}
	HashTable<int,char> hr = ht;
	system("pause");
	return 0;
}