#include<iostream>
#include<vector>
#include<string>
using namespace std;

size_t _GetNextPrm(size_t size)
	{
	 const int _PrimeSize = 28;
	 static const  unsigned long _PrimeList [_PrimeSize] =
    {
        53ul,         97ul,         193ul,       389ul,       769ul,
        1543ul,       3079ul,       6151ul,      12289ul,     24593ul,
        49157ul,      98317ul,      196613ul,    393241ul,    786433ul,
        1572869ul,    3145739ul,    6291469ul,   12582917ul,  25165843ul,
        50331653ul,   100663319ul,  201326611ul, 402653189ul, 805306457ul,
        1610612741ul, 3221225473ul, 4294967291ul
    };
	 size_t i = 0;
	 for( i = 0; i < _PrimeSize ;++i)
	 {
		 if(_PrimeList[i] > size)
		 {
			 return _PrimeList[i];
		 }
	 }
		 return _PrimeList[i-1];
	}

class BitMap
{
public:
	BitMap()
		:_size(0)
	{}
	BitMap(size_t size)
		:_size(0)
	{
		size = Resize(size);
		_a.resize((size>>5)+1);
	}

	size_t Resize(size_t size)
	{
		return _GetNextPrm(size);
	}

	void Ret(size_t size)
	{
		size_t indix = size >>5;
		size_t num = size % 32;
		if(!(_a[indix] >> num))
		{
			_a[indix] |= (1 << num);
			_size++;
		}
		
	}

	void Reset(size_t size)
	{
		size_t indix = size >>5;
		size_t num = size % 32;
		if((_a[indix] >> num))
		{
			_a[indix] &= ~(1 << num);
			_size--;
		}
	}

	bool Test(size_t x)
	{
		size_t indix = x >>5;
		size_t num = x % 32;
		return (_a[indix] & (1 << num));
	}

	size_t Size()
	{
		return _size;
	}

private:
	vector<size_t> _a;
	size_t _size;
};

static size_t BKDRHash(const char * str)
  {
     unsigned int seed = 131; // 31 131 1313 13131 131313
     unsigned int hash = 0;
     while (*str)
    {
         hash = hash * seed + (* str++);
    }
     return (hash & 0x7FFFFFFF);
  }

size_t SDBMHash(const char *str)  
{  
    register size_t hash = 0;  
    while (size_t ch = (size_t)*str++)  
    {  
        hash = 65599 * hash + ch;         
        //hash = (size_t)ch + (hash << 6) + (hash << 16) - hash;  
    }  
    return hash;  
}  
size_t RSHash(const char *str)  
{  
    register size_t hash = 0;  
    size_t magic = 63689;     
    while (size_t ch = (size_t)*str++)  
    {  
        hash = hash * magic + ch;  
        magic *= 378551;  
    }  
    return hash;  
}  
size_t APHash(const char *str)  
{  
    register size_t hash = 0;  
    size_t ch;  
    for (long i = 0; ch = (size_t)*str++; i++)  
    {  
        if ((i & 1) == 0)  
        {  
            hash ^= ((hash << 7) ^ ch ^ (hash >> 3));  
        }  
        else  
        {  
            hash ^= (~((hash << 11) ^ ch ^ (hash >> 5)));  
        }  
    }  
    return hash;  
}  

size_t JSHash(const char *str)  
{  
    if(!*str)        // 这是由本人添加，以保证空字符串返回哈希值0  
        return 0;  
    register size_t hash = 1315423911;  
    while (size_t ch = (size_t)*str++)  
    {  
        hash ^= ((hash << 5) + ch + (hash >> 2));  
    }  
    return hash;  
}  

struct _HashFunc1
{
    size_t operator()(const string& key)
    {
        return  BKDRHash(key.c_str());    //要用c_str()才能把string 转化为 char*
    }
};

struct _HashFunc2
{
    size_t operator()(const string& key)
    {
        return  SDBMHash(key.c_str());    //要用c_str()才能把string 转化为 char*
    }
};

struct _HashFunc3
{
    size_t operator()(const string& key)
    {
        return  RSHash(key.c_str());    //要用c_str()才能把string 转化为 char*
    }
};
struct _HashFunc4
{
    size_t operator()(const string& key)
    {
        return  APHash(key.c_str());    //要用c_str()才能把string 转化为 char*
    }
};

struct _HashFunc5
{
    size_t operator()(const string& key)
    {
        return  JSHash(key.c_str());    //要用c_str()才能把string 转化为 char*
    }
};

template <class K = string,
class HashFunc1 = _HashFunc1,
class HashFunc2 = _HashFunc2,
class HashFunc3 = _HashFunc3,
class HashFunc4 = _HashFunc4,
class HashFunc5 = _HashFunc5>
class  BloomFilter
{
public:
	BloomFilter(size_t size)
		:_bitmap(_GetNextPrm(size))
		,_capatity(_GetNextPrm(size))
	{}
	bool Test(const K& key)
	{
		if(!_bitmap.Test(HashFunc1()(key)%_capatity))
			return false;
		if(!_bitmap.Test(HashFunc2()(key)%_capatity))
			return false;
		if(!_bitmap.Test(HashFunc3()(key)%_capatity))
			return false;
		if(!_bitmap.Test(HashFunc4()(key)%_capatity))
			return false;
		if(!_bitmap.Test(HashFunc5()(key)%_capatity))
			return false;

		return true;
	}

	void Set(const K& key)
	{
		_bitmap.Ret(HashFunc1()(key)%_capatity);
		_bitmap.Ret(HashFunc2()(key)%_capatity);
		_bitmap.Ret(HashFunc3()(key)%_capatity);
		_bitmap.Ret(HashFunc4()(key)%_capatity);
		_bitmap.Ret(HashFunc5()(key)%_capatity);
	}
protected:
	BitMap _bitmap;
	size_t _capatity;
};

int main()
{
	BloomFilter<string>  ht(100);
	ht.Set("李晓");
	ht.Set("李萧");
	ht.Set("李瑶");
	ht.Set("李陪");
	cout<<ht.Test("李晓");
	system("pause");
	return 0;
}